version: '3.5'

services:
  # MySQL
  db:
    image: scan-mariadb
    container_name: mysql_host
    env_file:
      - .env
    volumes:
      - ./scan-mariadb/docker/db/data:/var/lib/mysql
      - ./scan-mariadb/docker/db/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./scan-mariadb/docker/db/init:/docker-entrypoint-initdb.d
      - ./scan-mariadb/docker/db/scripts:/scripts
    ports:
      - 127.0.0.1:3306:3306
    # - 3306:3306
    networks:
      - scan-network
    user: '${USERID}:${GROUPID}'

  # phpMyAdmin
  phpmyadmin:
    container_name: test_phpmyadmin
    image: phpmyadmin/phpmyadmin
    env_file:
      - .env
    ports:
      - 127.0.0.1:8080:80
    networks:
      - scan-network

  redis:
    restart: always
    image: redis:6.0
    container_name: scan_redis
    expose:
      - "6379"
    logging:
      driver: "json-file" # defaults if not specified
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - scan-network

  api_public:
    image: scan_api_public
    container_name: scan_api_public
    env_file: .env
    ports:
      - "127.0.0.1:${PUBLIC_API_PORT}:8000"
    volumes:
      - ./scan_api_public/keyfiles:/keyfiles
    depends_on:
      - redis
    networks:
      - scan-network
    user: '${USERID}:${GROUPID}'

  api_internal:
    image: scan_api_internal
    container_name: scan_api_internal
    env_file: .env
    ports:
      - '127.0.0.1:${API_PORT}:8000'
    networks:
      - scan-network

  app:
    image: scan-app
    env_file: .env
    container_name: scan_app
    ports:
      - "0.0.0.0:3000:3000"
    #   - '0.0.0.0:80:3000'
    networks:
      - scan-network

  nginx:
    env_file: .env
    container_name: nginx
    image: nginx:alpine

    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    volumes:
      - ./scan-reverse-proxy/root:/usr/local/nginx/html
      - ./scan-reverse-proxy/conf.d:/etc/nginx/conf.d
      - ./scan-reverse-proxy/log:/var/log/nginx/
      - /etc/ssl/certs:/etc/ssl/certs
    depends_on:
      app:
        condition: service_started
    networks:
      - scan-network
  
  observer:
    image: scan_data_observer
    container_name: observer
    env_file: .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scan_data_observer/data/:/data
      - ./scan_data_observer/logs/:/logs
    networks:
      - scan-network

networks:
  scan-network:
    name: scan-network
    driver: bridge
